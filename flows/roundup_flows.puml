@startuml
actor Client
participant RoundingController
participant RoundingService
participant AccountsService
participant TransactionsService
participant SavingsGoalService
participant APIIntegrationService

Client -> RoundingController: PUT /round-save {"savingsGoalName": String, "since": Date}
RoundingController -> RoundingService: roundAndSave(savingsGoalName, since)
RoundingService -> AccountsService: getPrimaryAccount()
AccountsService -> APIIntegrationService: GET /api/v2/accounts
APIIntegrationService --> AccountsService: Return all accounts for the authenticated user
AccountsService --> RoundingService: Return primary account or throw error

RoundingService -> TransactionsService: Get transactions for primary account
TransactionsService -> APIIntegrationService: GET feed/account/accountUid/category/categoryUid?changesSince={changesSince}
APIIntegrationService --> TransactionsService: List of transactions occurred since "changesSince"
TransactionsService --> TransactionsService: extract eligible transactions
TransactionsService --> RoundingService: return eligible transactions

RoundingService -> SavingsGoalService: Process transactions by rounding up to an amount
SavingsGoalService -> APIIntegrationService: Fetch saving goals
APIIntegrationService --> SavingsGoalService: Return all available saving goals

alt Saving goal exists
    SavingsGoalService -> SavingsGoalService: Find saving goal by "savingGoalName" or use default "Hammed Saving" if "null"
else
    SavingsGoalService -> SavingsGoalService: Create new saving goal by "savingGoalName" or use default "Hammed Saving" if "null"
end

SavingsGoalService -> APIIntegrationService: Transfer money to saving goal retrieved from the above
SavingsGoalService --> RoundingService: Return affected saving goal

RoundingService --> RoundingController: Return affected saving goal details
RoundingController --> Client: SavingsGoal object serialized as JSON(ommitted for brevity)
@enduml